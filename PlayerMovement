using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Movement : MonoBehaviour
{
	public float speed;
	public float sneakSpeed;
	public Rigidbody rb;
	public Jump2 jumb;
	public bool sneak;
	public float cameraSentivity;
	public bool gamePaused;
	[SerializeField] public GameObject pausePanel;
	[SerializeField] public GameObject settings;
	[SerializeField] public GameObject death;
	[SerializeField] public GameObject tutorial;
	public float exp;
	public float level;
	public bool tutorialaon;
	public Animator animator;
	public AudioSource walk;
	public AudioClip walkClip;
	float nextPlay;
	public float move;
	public bool isbrounded;
	
//for rotation after mouse
	public float horizontalSpeed = 2.0F;
	public float verticalSpeed = 2.0F;
	public bool ismoving;

void Start()
	{
    	tutorialaon = false;
    	gamePaused = false;
    	pausePanel.SetActive(false);
    	settings.SetActive(false);
    	rb = GetComponent<Rigidbody>();
    	jumb = GetComponent<Jump2>();
    	animator = GetComponent<Animator>();
	}

void Update()
	{
    	//rotation after mouse
    	float mouseInput = Input.GetAxis("Mouse X");
    	Vector3 lookhere = new Vector3(0, mouseInput, 0);
    	transform.Rotate(lookhere);
    	isbrounded = jumb.onGround;

    	if (exp == 10)
    		{
        	exp = 0;
        	level =+ 1;
    		}
		
    	sneak |= Input.GetKeyDown(KeyCode.LeftShift);
    	//sneaking animation
    	sneak &= !Input.GetKeyUp(KeyCode.LeftShift);
    	if (Input.GetKeyDown(KeyCode.Escape))
    	{
        	if (!pausePanel.activeInHierarchy)
        		{
            		PauseGame();
        		}
        	else
        		if (pausePanel.activeInHierarchy)
			{
            		ContinueGame();
        		}
    	}

    	transform.Translate(0f, 0f, Input.GetAxis("Vertical") * Time.deltaTime * (sneak ? sneakSpeed : speed));
    	transform.Rotate(0, Input.GetAxis("Mouse X") * cameraSentivity, 0);
    	move = Input.GetAxis("Vertical");
    	
    	animator.SetFloat("Running", move);
    	ismoving |= move > 0;
    	ismoving |= move < 0;
    	ismoving &= move != 0;
    	
if (isbrounded == true && ismoving == true && Time.time > nextPlay)
    	{
        	nextPlay = Time.time + walkClip.length;
        	walk.volume = Random.Range(0.8f, 1);
        	walk.pitch = Random.Range(0.8f, 1.1f);
        	walk.Play();
    	}

    	if (Input.GetKeyDown(KeyCode.C))
    		{
        	Tutorial();
    		}
	}

public void PauseGame()
	{
    	Time.timeScale = 0;
    	pausePanel.SetActive(true);
	}

public void ContinueGame()
	{
    	Time.timeScale = 1;
    	pausePanel.SetActive(false);
    	settings.SetActive(false);
	}

public void OpenSettings(){
    	settings.SetActive(true);
	}

public void CloseSettings()
	{
    	settings.SetActive(false);
	}

public void Death()
	{
    	Time.timeScale = 0;
    	death.SetActive(true);
	}

public void Tutorial()
	{
    	tutorial.SetActive(!tutorial.activeInHierarchy);
	}

}
